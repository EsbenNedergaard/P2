 public void addProduct(Product product, int productPosition) {
        checkForIllegalProductPostion(productPosition);

        Point2D placementPoint = createProductPlacementPoint(productPosition);
        // Check if position contains a product
        if(containsProduct(placementPoint))
            throw new IllegalProductPositionException("Place contains a product");

        product.setProductPosition(placementPoint);
        productList.add(product);
    }


    @Override
    public boolean containsProduct(Point2D point) {
        for(Product item : productList) {
            if(item.getProductPosition().equals(point))
                return true;
        }
        return false;
    }




        while(i < getRackLength() && !found) {
            Point2D productPoint = createProductPlacementPoint(i);
            if(!containsProduct(productPoint)) {
                product.setProductPosition(productPoint);
                productList.add(product);
                found = true;
            }
            i++;
        }




    void checkForIllegalProductPostion(int productPosition){
        // Check if position is negative
        if(productPosition < 0)
            throw new IllegalProductPositionException("The product position cannot be negative");

        // Check if rack position is in rack
        if(productPosition > getRackLength())
            throw new IllegalProductPositionException("The product position was too high");
    }



        @Override
        public Product getProduct(int id) {
            for(Product item : productList) {
                if(item.getById() == id)
                    return item;
            }
            // Product does not exist
            throw new ProductDoesNotExistException();
        }
